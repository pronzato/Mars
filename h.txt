// === Simple table: column width = max cell length; Aliases at the end ===
public final void printHelp() {
  // ----- Top-level table -----
  var topHeaders = new String[] { "Option", "Type", "Default", "Req", "Aliases" };
  var topRows = new ArrayList<String[]>();
  for (ParamInfo p : topParamsInfo()) {
    topRows.add(new String[] {
        "--" + toKebab(p.name),
        typeNameForHelp(p.type),
        String.valueOf(p.defaultValue),
        p.mandatory ? "yes" : "",
        p.aliases == null || p.aliases.isEmpty() ? "" : String.join(", ", p.aliases)
    });
  }
  renderFixedTable("Top-level options", topHeaders, topRows);

  // ----- Subset tables -----
  for (SubsetInfo s : subsetsInfo()) {
    var subsetHeaders = new String[] { "Option", "Type", "Default", "Req", "Aliases" };
    var subsetRows = new ArrayList<String[]>();
    for (ParamInfo p : s.params) {
      subsetRows.add(new String[] {
          "--" + s.prefix + "." + toKebab(p.name),
          typeNameForHelp(p.type),
          String.valueOf(p.defaultValue),
          p.mandatory ? "yes (if used)" : "",
          p.aliases == null || p.aliases.isEmpty() ? "" : String.join(", ", p.aliases)
      });
    }
    renderFixedTable("Subset: " + s.className + "  (use --" + s.prefix + ".<field>)",
        subsetHeaders, subsetRows);
  }
}

// === Helpers ===
private static void renderFixedTable(String title, String[] headers, java.util.List<String[]> rows) {
  int cols = headers.length;
  int[] widths = new int[cols];

  // 1) Seed with header lengths
  for (int c = 0; c < cols; c++) widths[c] = headers[c] == null ? 0 : headers[c].length();

  // 2) Grow to maximum cell length per column (no wrapping)
  for (String[] r : rows) {
    for (int c = 0; c < cols; c++) {
      String cell = (r[c] == null) ? "" : r[c];
      if (cell.length() > widths[c]) widths[c] = cell.length();
    }
  }

  // 3) Render
  String hbar = fixedHbar(widths);
  System.out.println();
  System.out.println(title);
  System.out.println(hbar);
  System.out.println(fixedRow(headers, widths));
  System.out.println(hbar);
  for (String[] r : rows) System.out.println(fixedRow(r, widths));
  System.out.println(hbar);
}

private static String fixedHbar(int[] widths) {
  StringBuilder sb = new StringBuilder();
  sb.append('+');
  for (int w : widths) sb.append("-".repeat(w + 2)).append('+');
  return sb.toString();
}

private static String fixedRow(String[] cells, int[] widths) {
  StringBuilder sb = new StringBuilder();
  sb.append('|');
  for (int c = 0; c < widths.length; c++) {
    String cell = cells[c] == null ? "" : cells[c];
    sb.append(' ').append(padRight(cell, widths[c])).append(' ').append('|');
  }
  return sb.toString();
}

private static String padRight(String s, int w) {
  if (s == null) s = "";
  int pad = w - s.length();
  if (pad <= 0) return s;
  return s + " ".repeat(pad);
}
