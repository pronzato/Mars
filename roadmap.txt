1. Roadmap Presentation Background
===============================
Need your assistance putting together a roadmap for foundation services, using Fabric to pull things together. As a reminder, foundation services will cover reference data, positions, entitlements, and order state. We need to ensure we are being mindful of the deep deployments in many cases for existing solutions so any roadmap must include a path for migration. The roadmap would take the form o milestones over the next say 18 months that achieve specific objectives and clearly articulate the stories we are delivering for each milestone. If we cannot show a sufficiently detailed plan we run the risk of being underfunded and under resourced. 

1.1 Reference Data 
==================
For reference data, there are really two pieces our roadmap needs to address Architecture: we have several solutions already in this space: REIT, RD2, RD3. None of them are perfect as is. The ideal solution would support a mission critical SLA, be more scalable, have cleaner APT solution, build in data quality checks and monitoring fran the start, etc. This area is trickiest as any significant changes must provide an adoption roadmap for existing clients of these solutions. Any good solution can't be just pure pass through our mandate should be to buffer clients from the idiosyncrasies of th upstream sources as much as possible without being an 50% of course). The architecture must take historical capture inta consideration as well Coverage full complement of data sources, leveraging the main enterprise RefData Platform (PPP) where possible but supplementing where needed. The ETF composition stability work is an example of projects in this space. Other projects would be rechange/market schedule/timing, other types of composition, vendor data sets not in PPP like 1 and 11, integration with other internal systems 

1.2 Positions
=============
Positions is in a better spot as we have some requirements a'ready. Outside of the functional anks, the roadmap should be focused on Improving the API and completing the Openshift deployment. Would be good to mention our plans to delve into the area of ultra-iow latency position management yet. 

1.3 Entitlements
================
Entitlements is a bit more green field in my mind. We have an existing entitlements system (EES) and something being built out of another tech group that is a wrapper on the enterprise entitlements system but I don't think either go far enough. A proper service in this area for me would support any Enterprise systems involved in IAM (the enterprise system, but also Active Directory, lass, CSDR, UIDLI, etc.) and be able to act on behalf of applications. So rather than every system integrating directly with laas to capture login events, they use the Entitlements API, which in turn makes the appropriate call to laas to capture the event. Our apps then use one Alt as opposed to 10. I know this is ambitious but I think it's a real value add, especially when we layer on a proper data model for our business. 

1.4 Order State 
===============
Order State is more problematic. It's a lot of data, so the first priority in the roadmap is stability. It's built on top of an existing component called OS that has made some performance improvements recently we need to adopt. But we probably need to vet of the approach actually will scale for the use cases we have and beyond. It's a vast amount of data, especially if we take child orders into account. The APS is also not ideal as of now because AMPS is hard to use in an entitled way. 

I think Fabric can play in part of nearly all of these problems. We would need to be crisp in articulating where it fits alongside existing solutions and be realistic that we would be proposing usage of a large code base unfamiliar to most of the org


2. RoadMap Structure
====================
A clearly defined and well implemented automated SDLC that covers code repositories, Jira management, automated testing, and automated deployments Clear separation of the C1 and D1 "containers" vs. business logic locations Reference Data platform and integration Market Data connectivity to our MD platforms, along with clear guidelines on how to enable feeds across both technologies Positions, inclusive of book positions, agg unit positions, and virtual books with entitlements A flexible entitlements system Order state covering: o The engine recovery use case, where execution engines are stateless and can use order state to recover Multisystem trading support, where the engine can see "related" activity such as manual trading for decision making Polyglot Fabric API access (including data storage) Clarity on how to build Uls to support our engines


3. Key Tech Overarching Features
================================
3.1 Infrastructure
* Global Federated (AMRS, EMEA & APAC)
* Highly Available
* Active-Active Infrastructure & Key Services (multiple redundant instances across multiple data centers in each region AMRS, EMEA & APAC)
* Clients will automatically connect to locally available services for Active-Active
* Always up (never down) Infrastructure & Key Services
* Supports rolling updates of Infrastructure & Key Services (so limited downtime)
* Support applications/services/client running mix of bare metal, VM's and OpenShift
* Supports OpenTelemetry for instrumenting application metrics and tracing
* Leverage OpenShift for autoscaling key services
* Minimize vendor lock-in

3.2 Data
* Leverage S3 in each region for local remote storage
* Leverage Fabric to replicate S3 across regions
* Leverage Fabric to build key services using gRPC and Arrow Flight protocols (zero copy high vols)
* Integrates with GMA Data Lake and Polaris Data Lake
* Entitlements also supports row-level and column masking (possibly using Apache Ranger)

3.3 API
* Polyglot API (Python, Java, C++)
* Zero-Copy integration with popular Python tools (e.g. Pandas, Polars, NumPy) & R
* Support multiple data formats (Arrow, Parquet, JSON, CSV) to allow for max integration with other internal/external tools
* Support Apache Iceberg table format for historical data and time-travel and max integration with 3rd party compute engines

3.4 UI 
* Current strategic solution is 3Forge - however want to make sure we're not locked in if we want to switch to something else (Dash, React etc.)
* Highlight how using Fabric to abstract data delivery and egress will future proof us re: UI solutions


AI (want to highlight our roadmap has practical AI planned and integrated as part of the new platform on day 1)
* Support MCP for Fabric (list key biz and tech benefits)
* Leverage CoPilot for use-cases (Fabric Chronicle for testing, creating boiler plate code, building UI screens and wiring messaging with Fabric)
